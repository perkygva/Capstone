result4$Probability <- result4$Count/sum(result4$Count)
Query <- Tri.df$Gram_1 == sentence[2] &
Tri.df$Gram_2 == sentence[3]
result3 <- as.data.frame(Tri.df[Query])
result3$Probability <- result3$Count/sum(result3$Count)
Query
result3
Tri.df$Gram_1 == sentence[2] &
Tri.df$Gram_2 == sentence[3]
Tri.df
simple_prediction <- function(sentence = "I know") {
sentence <- str_trim(sentence)%>%
tolower %>%
removePunctuation %>%
removeNumbers %>%
stripWhitespace
wordcount = length(unlist(strsplit(sentence,split = " ")))
if (wordcount > 2) {
sentence <- word(sentence,c(-3, -2, -1))
}
if (wordcount == 2) {
sentence <- c("dummy", word(sentence,-2),word(sentence,-1))
}
if (wordcount == 1) {
sentence <- c("dummy", "dummy", sentence)
}
Query <- Qua.df$Grams_1 == sentence[1] &
Qua.df$Grams_2 == sentence[2] &
Qua.df$Grams_3 == sentence[3]
result4 <- as.data.frame(Qua.df[Query])
result4$Probability <- result4$Count/sum(result4$Count)
Query <- Tri.df$Grams_1 == sentence[2] &
Tri.df$Grams_2 == sentence[3]
result3 <- as.data.frame(Tri.df[Query])
result3$Probability <- result3$Count/sum(result3$Count)
Query <- Bi.df$N2Grams_1 == sentence[3]
result2 <- as.data.frame(Bi.df[Query])
result2$Probability <- result2$Count/sum(result2$Count)
if (nrow(result4) != 0 ) {
return(result4)
}
if (nrow(result3) != 0 ) {
return(result3)
}
if (nrow(result2) != 0 ) {
return(result2)
}
return(as.data.frame("Not found..."))
}
sentence
Query <- Qua.df$Grams_1 == sentence[1] &
Qua.df$Grams_2 == sentence[2] &
Qua.df$Grams_3 == sentence[3]
result4 <- as.data.frame(Qua.df[Query])
result4$Probability <- result4$Count/sum(result4$Count)
Qua.df
Query
Query <- Tri.df$Grams_1 == sentence[2] &
Tri.df$Grams_2 == sentence[3]
result3 <- as.data.frame(Tri.df[Query])
result3$Probability <- result3$Count/sum(result3$Count)
Query
result3
Query <- Bi.df$N2Grams_1 == sentence[3]
result2 <- as.data.frame(Bi.df[Query])
result2$Probability <- result2$Count/sum(result2$Count)
Query
Query <- Bi.df$Grams_1 == sentence[3]
result2 <- as.data.frame(Bi.df[Query])
result2$Probability <- result2$Count/sum(result2$Count)
Query
results2
result2
Bi.df
Query <- Bi.df$Grams_1 == sentence[3]
result2 <- as.data.frame(Bi.df[Query])
result2$Probability <- result2$Count/sum(result2$Count)
Query
Bi.df
simple_prediction("new")
simple_prediction("new york")
DummyPrediction <- function(sentence = "I love") {
sentence <- str_trim(sentence)
sentence <- tolower(sentence)
sentence <- removePunctuation(sentence)
sentence <- removeNumbers(sentence)
sentence <- stripWhitespace(sentence)
wordcount <- length(unlist(strsplit(sentence, split = " ")))
}
wordcount
runApp('NextWord_prediction')
predict0 <-function(input,Uni.df, Bi.df, Tri.df, maxResults = 3) {
sw <- stopwords(kind = "en")
input <- removePunctuation(input)
input <- removeNumbers(input)
input <- rev(unlist(strsplit(input," ")))
input <- setdiff(input,sw)
input <- input[grepl('[[:alpha:]]',input)]
input <- paste(input[2],input[1],sep = ' ')
input <- tolower(input)
if(input == ''|input == "na na") return('Warning: Just input something')
seektri<-grepl(paste0("^",input,"$"),trigramDF$bigram)
subtri<-trigramDF[seektri,]
input2 <- unlist(strsplit(input," "))[2]
seekbi <- grepl(paste0("^",input2,"$"),bigramDF$unigram)
subbi <- bigramDF[seekbi,]
unigramDF$s <- unigramDF$freq/nrow(unigramDF)*0.16
useuni <- unigramDF[order(unigramDF$s,decreasing = T),]
useunia <- useuni[1:maxResults,]
if (sum(seektri) == 0) {
if(sum(seekbi)==0){
return(head(unigramDF[order(unigramDF$freq,decreasing = T),1],
maxResults))
}
subbi$s <- 0.4*subbi$freq/sum(seekbi)
names <- c(subbi$name,useunia$unigram)
score <- c(subbi$s,useunia$s)
predictWord <- data.frame(next_word=names,score=score,stringsAsFactors = F)
predictWord <- predictWord[order(predictWord$score,decreasing = T),]
# in case replicated
final <- unique(predictWord$next_word)
final <- setdiff(final,badwords)
final <- final[grepl('[[:alpha:]]',final)]
return(final[1:maxResults])
}
subbi$s <- 0.4*subbi$freq/sum(seekbi)
subtri$s <- subtri$freq/sum(subtri$freq)
names <- c(subtri$name,subbi$name,useunia$unigram)
score <- c(subtri$s,subbi$s,useunia$s)
predictWord <- data.frame(next_word=names,score=score,stringsAsFactors = F)
predictWord <- predictWord[order(predictWord$score,decreasing = T),]
# in case replicated
final <- unique(predictWord$next_word)
final <- final[1:maxResults]
final <- setdiff(final,badwords)
final <- final[grepl('[[:alpha:]]',final)]
return(final)
}
source('G:/GENEVA/Allan/DS/Capstone/Ngrams.R', echo=TRUE)
library(qdap)
library(tm)
p_load(NLP)
p_load(ANLP)
Pen.df
modelslist = list(Uni.df, Bi.df, Tri.df, Qua.df, Pen.df)
predict_Backoff("Guy at my table's wife got up to go to the bathroom and I asked about dessert and he started telling me about his",modelsList)")
predict_Backoff("Guy at my table's wife got up to go to the bathroom and I asked about dessert and he started telling me about his",
modelsList)
predict_Backoff("Guy at my table's wife got up to go to the bathroom and I asked about dessert and he started telling me about his",
modelsList)
modelslist = list(Uni.df, Bi.df, Tri.df, Qua.df, Pen.df)
predict_Backoff("Guy at my table's wife got up to go to the bathroom and I asked about dessert and he started telling me about his",
modelsList)
modelslist
?predict_Backoff
testline = "Guy at my table's wife got up to go to the bathroom and I asked about dessert and he started telling me about his"
?generateTDM
?rollup
Uni.df
Bi.df
Tri.df
predict_Backoff(testline, modelslist)
testline = "Guy at my table's wife got up to go to the bathroom and I asked about dessert and he started telling me about his"
predict_Backoff(testline, modelslist)
modelslist = list(Uni.df, Bi.df, Tri.df, Qua.df, Pen.df)
predict_Backoff(testline, modelslist)
testline = "new"
predict_Backoff(testline, modelslist)
?predict_Backoff
p_load(ANLP)
generateTDM(all.corpus, 2, isTrace = F)
rm(all)
BI = generateTDM(all.corpus, 1, isTrace = F)
BI
testline = "Guy at my table's wife got up to go to the bathroom and I asked about dessert and he started telling me about his"
predict_Backoff(testline, BI)
UN = generateTDM(all.corpus, 1, isTrace = F)
BI = generateTDM(all.corpus, 2, isTrace = F)
TRI = generateTDM(all.corpus, 3, isTrace = F)
ac = sample(all.corpus, 10%)
ac = sample(all.corpus, 0.01)
UN = generateTDM(ac, 1, isTrace = F)
BI = generateTDM(ac, 2, isTrace = F)
TRI = generateTDM(ac, 3, isTrace = F)
testline = "Guy at my table's wife got up to go to the bathroom and I asked about dessert and he started telling me about his"
predict_Backoff(testline, BI)
ngramlist = list(UN, BI, TRI)
testline = "Guy at my table's wife got up to go to the bathroom and I asked about dessert and he started telling me about his"
predict_Backoff(testline, ngramlist)
modelslist = list(UN, BI, TRI)
predict_Backoff(testline, modelslist)
ac
dir(corpus.RData)
corpus.RData
load("corpus.RData")
ac = mycorpus.combo
UN = generateTDM(ac, 1, isTrace = F)
BI = generateTDM(ac, 2, isTrace = F)
rm(all, all.corpus, mycorpus, NB)
TRI = generateTDM(ac, 3, isTrace = F)
QUA = generateTDM(ac, 3, isTrace = F)
modelslist = list(UN, BI, TRI, QUA)
testline = "Guy at my table's wife got up to go to the bathroom and I asked about dessert and he started telling me about his"
predict_Backoff(testline, modelslist)
test2 = "new"
predict_Backoff(tes2, modelslist)
predict_Backoff(test2, modelslist)
testline = "Guy at my table's wife got up to go to the bathroom and I asked about dessert and he started telling me about"
test2 = "new"
predict_Backoff(testline, modelslist)
predict_Backoff(test2, modelslist)
testline = "he started telling me about"
test2 = "new"
predict_Backoff(testline, modelslist)
testline = "he started telling me about his dick"
test2 = "new"
predict_Backoff(testline, modelslist)
predict_Backoff(test2, modelslist)
testline = "he started telling me about his hour"
test2 = "new"
predict_Backoff(testline, modelslist)
predict_Backoff(test2, modelslist)
test2 = "new york"
predict_Backoff(testline, modelslist)
predict_Backoff(test2, modelslist)
test2 = "new york city"
predict_Backoff(test2, modelslist)
QUA = generateTDM(ac, 4, isTrace = F)
modelslist = list(UN, BI, TRI, QUA)
testline = "he started telling me about his hour"
test2 = "new york city"
predict_Backoff(testline, modelslist)
testline = "he started telling me about his"
test2 = "new york city"
predict_Backoff(testline, modelslist)
predict_Backoff(test2, modelslist)
predict_Backoff("new york, modelslist)
predict_Backoff("new york", modelslist)
predict_Backoff("new york", modelslist)
predict_Backoff("times", modelslist)
predict_Backoff("time square", modelslist)
predict_Backoff("about time", modelslist)
predict_Backoff("about his", modelslist)
predict_Backoff("about her", modelslist)
predict_Backoff("her", modelslist)
predict_Backoff("consists", modelslist)
predict_Backoff("consists of", modelslist)
predict_Backoff("it consists", modelslist)
ac = cleanTextData(mycorpus.combo)
UN = generateTDM(ac, 1, isTrace = F)
BI = generateTDM(ac, 2, isTrace = F)
TRI = generateTDM(ac, 3, isTrace = F)
QUA = generateTDM(ac, 4, isTrace = F)
modelslist = list(UN, BI, TRI, QUA)
testline = "he started telling me about his"
test2 = "new york city"
predict_Backoff(testline, modelslist)
predict_Backoff( modelslist)
predict_Backoff(test2, modelslist)
test_line <- "This is such a great day. The happy Birthday!!"
ngram_backoff("I am going to the", 1, db)
predict_backoff("I am going to the", 1, db)
predict_Backoff("I am going to the", 1, db)
predict_Backoff("I am going to the", 1)
predict_Backoff(test_line, modelslist)
predict_Backoff(test_line, modelslist)
test_line <- "The happy Birthday!!"
predict_Backoff(test_line, modelslist)
test_line <- "happy Birthday!!"
predict_Backoff(test_line, modelslist)
test_line <- "happy Birthday"
predict_Backoff(test_line, modelslist)
NB = naiveBayes(as.matrix(training.set), as.factor(training.labels))
source('G:/GENEVA/Allan/DS/Capstone/Prediction_model.R', echo=TRUE)
runApp('NextWord_prediction')
runApp('NextWord_prediction')
runApp('NextWord_prediction')
source('G:/GENEVA/Allan/DS/Capstone/pred2.R', echo=TRUE)
runApp('NextWord_prediction')
runApp('NextWord_prediction')
runApp('NextWord_prediction')
runApp('NextWord_prediction')
runApp('NextWord_prediction')
runApp('NextWord_prediction')
runApp('NextWord_prediction')
source('G:/GENEVA/Allan/DS/Capstone/pred2.R', echo=TRUE)
simple_prediction("I know")
load("Ngrams.RData")
rm(all, blog, blog2, mycorpus, mycorpus.combo, NB, news)
word_count("I know")
?word_count
input = "I know"
sentence <- cleanTextData(input)
wordcount = word_count(sentence)
wordcount
sentence
wordcount
?word
word("i know who you are", start(-3))
word("i know who you are", start(-3), end = start)
word("i know who you are", c(-3,-2,-1))
c("dummy", word(sentence,-2, -1))
sentence
sentence <- c("dummy", input(sentence,-2, -1))
input = "New York City"
word(input, c(-3,-2,-1))
word(input,-2, -1)
word(input)
word(input,c(-3, -2, -1))
sentence[1]
sentence <- cleanTextData(input)%>%
generateTDM
?word_count
sentence <- cleanTextData(input)%>%
generateTDM(., word_count(input))
sentence
sentence[1]
sentence[2]
sentence <- word(input,c(-3, -2, -1))
sentence[1]
sentence[2]
sentence[3]
result4 <- as.data.frame(Qua.df[Query])
Query <- Qua.df$Grams_1 == sentence[1] &
Qua.df$Grams_2 == sentence[2] &
Qua.df$Grams_3 == sentence[3]
result4 <- as.data.frame(Qua.df[Query])
result4
result4$Probability <- result4$Count/sum(result4$Count)
result4
source('G:/GENEVA/Allan/DS/Capstone/import_data.R', echo=TRUE)
source('G:/GENEVA/Allan/DS/Capstone/Ngrams.R', echo=TRUE)
?predict_Backoff
predict_Backoff(testline, modelslist, isDebugMode = F)
testline = "he started telling me about his"
predict_Backoff(testline, modelslist, isDebugMode = F)
testline = " me about his"
predict_Backoff(testline, modelslist, isDebugMode = F)
testline = "he started telling me about his"
test2 = "new york city"
test_line <- "happy Birthday"
predict_Backoff(testline, modelslist)
predict_Backoff(test2, modelslist)
predict_Backoff(test_line, modelslist)
ac = cleanTextData(mycorpus.combo)
UN = generateTDM(ac, 1, isTrace = F)
BI = generateTDM(ac, 2, isTrace = F)
TRI = generateTDM(ac, 3, isTrace = F)
QUA = generateTDM(ac, 4, isTrace = F)
modelslist = list(UN, BI, TRI, QUA)
testline = "he started telling me about his"
test2 = "new york city"
test_line <- "happy Birthday"
predict_Backoff(testline, modelslist)
predict_Backoff(test2, modelslist)
predict_Backoff(test_line, modelslist)
test_line <- "happy birthday"
predict_Backoff(testline, modelslist)
predict_Backoff(test2, modelslist)
predict_Backoff(test_line, modelslist)
test_line <- "happy"
predict_Backoff(test_line, modelslist)
predict_Backoff(test2, modelslist)
test_line = "happy"
predict_Backoff(test_line, modelslist)
line = "happy"
predict_Backoff(line, modelslist)
line = "birthday"
predict_Backoff(line, modelslist)
predict_Backoff(test2, modelslist)
predict_Backoff(testline, modelslist)
predict_Backoff(testline, modelslist)
PEN = generateTDM(ac, 5, isTrace = F)
modelslist = list(UN, BI, TRI, QUA,PEN)
ac = cleanTextData(comb)
load("import_data.RData")
load("samples.RData")
ac = cleanTextData(comb)
ac = cleanTextData(combo)
UN = generateTDM(ac, 1, isTrace = F)
BI = generateTDM(ac, 2, isTrace = F)
TRI = generateTDM(ac, 3, isTrace = F)
QUA = generateTDM(ac, 4, isTrace = F)
PEN = generateTDM(ac, 5, isTrace = F)
modelslist = list(UN, BI, TRI, QUA,PEN)
testline = "he started telling me about his"
test2 = "new york city"
line = "birthday"
predict_Backoff(testline, modelslist)
predict_Backoff(test2, modelslist)
predict_Backoff(line, modelslist)
predict_Backoff(line, modelslist)
line = "happy birthday"
predict_Backoff(line, modelslist)
Qua.df
Uni.df
Bi.df
Tri.df
Qua.df
source('G:/GENEVA/Allan/DS/Capstone/import_data.R', echo=TRUE)
combo
ac = cleanTextData(combo)
UN = generateTDM(ac, 1, isTrace = F)
BI = generateTDM(ac, 2, isTrace = F)
QUA = generateTDM(ac, 4, isTrace = F)
TRI = generateTDM(ac, 3, isTrace = F)
PEN = generateTDM(ac, 5, isTrace = F)
backoff = function(input){
predict_Backoff(input, modelslist)
}
load("Ngrams.RData")
simple_prediction <- function(input = "I know") {
wordcount = word_count(input)
if (wordcount > 2) {
phrase <- word(input,c(-3, -2, -1))
}
if (wordcount == 2) {
phrase <- word(input,-2, -1)
}
if (wordcount == 1) {
phrase <- word(input)
}
Query <- Qua.df$Grams_1 == phrase[1] &
Qua.df$Grams_2 == phrase[2] &
Qua.df$Grams_3 == phrase[3]
result4 <- as.data.frame(Qua.df[Query])
result4$Probability <- result4$Count/sum(result4$Count)
Query <- Tri.df$Grams_1 == phrase[2] &
Tri.df$Grams_2 == phrase[3]
result3 <- as.data.frame(Tri.df[Query])
result3$Probability <- result3$Count/sum(result3$Count)
Query <- Bi.df$Grams_1 == phrase[3]
result2 <- as.data.frame(Bi.df[Query])
result2$Probability <- result2$Count/sum(result2$Count)
if (nrow(result4) != 0 ) {
return(result4)
} else if (nrow(result3) != 0 ) {
return(result3)
}else if (nrow(result2) != 0 ) {
return(result2)
}else{
return(as.data.frame("Not found..."))
}
}
wordcount = word_count(input)
if (wordcount > 2) {
phrase <- word(input,c(-3, -2, -1))
}
input = "I know you"
wordcount = word_count(input)
wordcount
if (wordcount > 2) {
phrase <- word(input,c(-3, -2, -1))
}
phrase
if (wordcount == 2) {
phrase <- word(input,-2, -1)
}
if (wordcount == 1) {
phrase <- word(input)
}
Qua.df$Grams_1
Query <- Qua.df$Grams_1 == phrase[1] &
Qua.df$Grams_2 == phrase[2] &
Qua.df$Grams_3 == phrase[3]
Query
result4
result4 <- as.data.frame(Qua.df[Query])
result4
phrase
dim(Qua.df)
?rollup
Pen.df
wordcloud(Tri.df[,1], Tri.df[,2], min.freq = 10, max.words = 100,random.order = F, ordered.colors = F, colors = palette())
title("3-gram cloud")
Qua_df
source('G:/GENEVA/Allan/DS/Capstone/Tokenization.R', echo=TRUE)
runApp('NextWord_prediction')
runApp('NextWord_prediction')
runApp('NextWord_prediction')
installed.packages()
source('G:/GENEVA/Allan/DS/Capstone/import_data.R', echo=TRUE)
source('G:/GENEVA/Allan/DS/Capstone/Copus_lists.R', echo=TRUE)
source('G:/GENEVA/Allan/DS/Capstone/Tokenization.R', echo=TRUE)
Bi_df
load("samples.RData")
ac = cleanTextData(combo)
UN = generateTDM(ac, 1, isTrace = F)
BI = generateTDM(ac, 2, isTrace = F)
TRI = generateTDM(ac, 3, isTrace = F)
QUA = generateTDM(ac, 4, isTrace = F)
PEN = generateTDM(ac, 5, isTrace = F)
PEN
backoff = function(input){
predict_Backoff(input, modelslist)
}
backoff("i know")
modelslist = list(UN, BI, TRI, QUA,PEN)
save(modelslist, file = "modelslist.RData")
backoff = function(input){
load("modelslist.RData")
predict_Backoff(input, modelslist)
}
backoff("I know")
backoff("I know")
backoff("I know you")
backoff("I know you")
rep(backoff("I Know", 5))
rep(backoff("I Know"), 5))
rep(backoff("I Know"), 5)
rep(backoff("I Know you"), 5)
runApp('NextWord_prediction')
